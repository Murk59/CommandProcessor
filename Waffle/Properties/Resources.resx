<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentMustBeGreaterThanOrEqualTo" xml:space="preserve">
    <value>Value must be greater than or equal to {0}.</value>
  </data>
  <data name="ArgumentMustBeLessThanOrEqualTo" xml:space="preserve">
    <value>Value must be less than or equal to {0}.</value>
  </data>
  <data name="ArgumentNullOrEmpty" xml:space="preserve">
    <value>The argument '{0}' is null or empty.</value>
  </data>
  <data name="Common_PropertyNotFound" xml:space="preserve">
    <value>The property {0}.{1} could not be found.</value>
  </data>
  <data name="Common_TypeMustDeriveFromType" xml:space="preserve">
    <value> The type {0} must derive from {1}</value>
  </data>
  <data name="DataAnnotationsModelValidatorProvider_ConstructorRequirements" xml:space="preserve">
    <value>The type {0} must have a public constructor which accepts three parameters of types {1}, {2}, and {3}.</value>
  </data>
  <data name="DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements" xml:space="preserve">
    <value>The type {0} must have a public constructor which accepts two parameters of types {1} and {2}.</value>
  </data>
  <data name="DefaultHandlerActivator_ErrorCreatingHandler" xml:space="preserve">
    <value>An error occurred when trying to create a handler of type '{0}'. Make sure that the handler has a parameterless public constructor.</value>
  </data>
  <data name="DefaultHandlerSelector_CommandTypeAmbiguous" xml:space="preserve">
    <value>Multiple types were found that match the command of type '{0}'. This can happen if the processor that services this request found multiple handlers defined with the same command, which is not supported.{2}{2}
The request for '{0}' has found the following matching handlers : {1}</value>
  </data>
  <data name="DefaultHandlerSelector_HandlerNotFound" xml:space="preserve">
    <value>No handler was found that matches the command of type '{0}'.</value>
  </data>
  <data name="DefaultServices_InvalidServiceType" xml:space="preserve">
    <value>The service type {0} is not supported.</value>
  </data>
  <data name="DependencyResolverNoService" xml:space="preserve">
    <value>No service registered for type '{0}'.</value>
  </data>
  <data name="HandlerFilterAttribute_MustSupplyResponseOrException" xml:space="preserve">
    <value>After calling {0}.OnHandlerExecuted, the HandlerExecutedContext properties Result and Exception were both null. At least one of these values must be non-null. To provide a new response, please set the Result object; to indicate an error, please throw an exception.</value>
  </data>
  <data name="InvalidEnumArgument" xml:space="preserve">
    <value>The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.</value>
  </data>
  <data name="TraceActionFilterMessage" xml:space="preserve">
    <value>Handler filter for '{0}'</value>
  </data>
  <data name="TraceCancelledMessage" xml:space="preserve">
    <value>Cancelled</value>
  </data>
  <data name="TraceHandlerSelectedMessage" xml:space="preserve">
    <value>Selected handler '{0}'</value>
  </data>
  <data name="TraceNoneObjectMessage" xml:space="preserve">
    <value>none</value>
  </data>
  <data name="TraceRequestValidatedMessage" xml:space="preserve">
    <value>Validated request for command '{0}'</value>
  </data>
  <data name="CategoryFormat" xml:space="preserve">
    <value>Category='{0}'</value>
  </data>
  <data name="ExceptionFormat" xml:space="preserve">
    <value>Exception={0}</value>
  </data>
  <data name="IdFormat" xml:space="preserve">
    <value>Id={0}</value>
  </data>
  <data name="MessageFormat" xml:space="preserve">
    <value>Message='{0}'</value>
  </data>
  <data name="OperationFormat" xml:space="preserve">
    <value>Operation={0}.{1}</value>
  </data>
  <data name="ShortRequestFormat" xml:space="preserve">
    <value>Request</value>
  </data>
  <data name="ShortResponseFormat" xml:space="preserve">
    <value>Response</value>
  </data>
  <data name="TimeLevelKindFormat" xml:space="preserve">
    <value>[{0}] Level={1}, Kind={2}</value>
  </data>
  <data name="TimeRequestFormat" xml:space="preserve">
    <value>[{0}] Request received</value>
  </data>
  <data name="TimeResponseFormat" xml:space="preserve">
    <value>[{0}] Sending response</value>
  </data>
  <data name="TraceLevelOutOfRange" xml:space="preserve">
    <value>The TraceLevel property must be a value between TraceLevel.Off and TraceLevel.Fatal, inclusive.</value>
  </data>
  <data name="TraceHandlerExecutedMessage" xml:space="preserve">
    <value>Executed handler for message '{0}'</value>
  </data>
  <data name="ElapsedFormat" xml:space="preserve">
    <value>Elapsed='{0} millisecond(s)'</value>
  </data>
  <data name="MissingDataMemberIsRequired" xml:space="preserve">
    <value>Property '{0}' on type '{1}' is invalid. Value-typed properties marked as [Required] must also be marked with [DataMember(IsRequired=true)] to be recognized as required. Consider attributing the declaring type with [DataContract] and the property with [DataMember(IsRequired=true)].</value>
  </data>
  <data name="MissingRequiredMember" xml:space="preserve">
    <value>The {0} property is required.</value>
  </data>
  <data name="ValidatableObjectAdapter_IncompatibleType" xml:space="preserve">
    <value>The model object inside the metadata claimed to be compatible with {0}, but was actually {1}.</value>
  </data>
  <data name="ValidationAttributeOnField" xml:space="preserve">
    <value>Field '{0}' on type '{1}' is attributed with one or more validation attributes. Validation attributes on fields are not supported. Consider using a public property for validation instead.</value>
  </data>
  <data name="ValidationAttributeOnNonPublicProperty" xml:space="preserve">
    <value>Non-public property '{0}' on type '{1}' is attributed with one or more validation attributes. Validation attributes on non-public properties are not supported. Consider using a public property for validation instead.</value>
  </data>
  <data name="Validation_ValueNotFound" xml:space="preserve">
    <value>A value is required but was not present in the request.</value>
  </data>
  <data name="QueryService_NoQueryContext" xml:space="preserve">
    <value>No IQueryContext factory found for '{0}'.</value>
  </data>
  <data name="QueryService_NoQueryContextFactory" xml:space="preserve">
    <value>IQueryContext factory for '{0}' return null.</value>
  </data>
</root>